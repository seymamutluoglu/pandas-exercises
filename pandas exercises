{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/seymamutluoglu1/pandas-exercises?scriptVersionId=194924330\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\ndf = sns.load_dataset(\"titanic\")","metadata":{"execution":{"iopub.status.busy":"2024-09-01T15:31:49.631581Z","iopub.execute_input":"2024-09-01T15:31:49.632025Z","iopub.status.idle":"2024-09-01T15:31:51.608625Z","shell.execute_reply.started":"2024-09-01T15:31:49.631983Z","shell.execute_reply":"2024-09-01T15:31:51.607265Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"Find the number of male and female passengers in the Titanic data set.","metadata":{}},{"cell_type":"code","source":"df[\"sex\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T00:57:19.229743Z","iopub.execute_input":"2024-08-31T00:57:19.230099Z","iopub.status.idle":"2024-08-31T00:57:19.240006Z","shell.execute_reply.started":"2024-08-31T00:57:19.230055Z","shell.execute_reply":"2024-08-31T00:57:19.239031Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"sex\nmale      577\nfemale    314\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"Find the number of unique values for each column.","metadata":{}},{"cell_type":"code","source":"unique_counts = df.nunique()\nprint(unique_counts)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T00:57:38.523339Z","iopub.execute_input":"2024-08-31T00:57:38.52378Z","iopub.status.idle":"2024-08-31T00:57:38.534858Z","shell.execute_reply.started":"2024-08-31T00:57:38.523737Z","shell.execute_reply":"2024-08-31T00:57:38.533768Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"survived         2\npclass           3\nsex              2\nage             88\nsibsp            7\nparch            7\nfare           248\nembarked         3\nclass            3\nwho              3\nadult_male       2\ndeck             7\nembark_town      3\nalive            2\nalone            2\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Find the number of unique values of the pclass variable.","metadata":{}},{"cell_type":"code","source":"df[\"pclass\"].nunique()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T01:00:01.940383Z","iopub.execute_input":"2024-08-31T01:00:01.941448Z","iopub.status.idle":"2024-08-31T01:00:01.949633Z","shell.execute_reply.started":"2024-08-31T01:00:01.941401Z","shell.execute_reply":"2024-08-31T01:00:01.948487Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"3"},"metadata":{}}]},{"cell_type":"markdown","source":"Pclass and parch ","metadata":{}},{"cell_type":"code","source":"df[[\"pclass\", \"parch\"]].nunique()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T01:04:32.220146Z","iopub.execute_input":"2024-08-31T01:04:32.220993Z","iopub.status.idle":"2024-08-31T01:04:32.234755Z","shell.execute_reply.started":"2024-08-31T01:04:32.220949Z","shell.execute_reply":"2024-08-31T01:04:32.23362Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"pclass    3\nparch     7\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"You checked the type of the embarked variable. Change the type to category and check again.","metadata":{}},{"cell_type":"code","source":"df[\"embarked\"].dtype\ndf[\"embarked\"] = df[\"embarked\"].astype(\"category\")\ndf[\"embarked\"].dtype\nprint(df[\"embarked\"].dtype)","metadata":{"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"category\n","output_type":"stream"}]},{"cell_type":"code","source":"print(df[df[\"embarked\"] == \"C\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-31T01:22:32.502261Z","iopub.execute_input":"2024-08-31T01:22:32.503403Z","iopub.status.idle":"2024-08-31T01:22:32.532852Z","shell.execute_reply.started":"2024-08-31T01:22:32.503353Z","shell.execute_reply":"2024-08-31T01:22:32.531622Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"     survived  pclass     sex   age  sibsp  parch     fare embarked   class  \\\n1           1       1  female  38.0      1      0  71.2833        C   First   \n9           1       2  female  14.0      1      0  30.0708        C  Second   \n19          1       3  female   NaN      0      0   7.2250        C   Third   \n26          0       3    male   NaN      0      0   7.2250        C   Third   \n30          0       1    male  40.0      0      0  27.7208        C   First   \n..        ...     ...     ...   ...    ...    ...      ...      ...     ...   \n866         1       2  female  27.0      1      0  13.8583        C  Second   \n874         1       2  female  28.0      1      0  24.0000        C  Second   \n875         1       3  female  15.0      0      0   7.2250        C   Third   \n879         1       1  female  56.0      0      1  83.1583        C   First   \n889         1       1    male  26.0      0      0  30.0000        C   First   \n\n       who  adult_male deck embark_town alive  alone  \n1    woman       False    C   Cherbourg   yes  False  \n9    child       False  NaN   Cherbourg   yes  False  \n19   woman       False  NaN   Cherbourg   yes   True  \n26     man        True  NaN   Cherbourg    no   True  \n30     man        True  NaN   Cherbourg    no   True  \n..     ...         ...  ...         ...   ...    ...  \n866  woman       False  NaN   Cherbourg   yes  False  \n874  woman       False  NaN   Cherbourg   yes  False  \n875  child       False  NaN   Cherbourg   yes   True  \n879  woman       False    C   Cherbourg   yes  False  \n889    man        True    C   Cherbourg   yes   True  \n\n[168 rows x 15 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(df[df[\"embarked\"] != \"S\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-31T01:23:41.304626Z","iopub.execute_input":"2024-08-31T01:23:41.305121Z","iopub.status.idle":"2024-08-31T01:23:41.323809Z","shell.execute_reply.started":"2024-08-31T01:23:41.305081Z","shell.execute_reply":"2024-08-31T01:23:41.32248Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"     survived  pclass     sex   age  sibsp  parch     fare embarked   class  \\\n1           1       1  female  38.0      1      0  71.2833        C   First   \n5           0       3    male   NaN      0      0   8.4583        Q   Third   \n9           1       2  female  14.0      1      0  30.0708        C  Second   \n16          0       3    male   2.0      4      1  29.1250        Q   Third   \n19          1       3  female   NaN      0      0   7.2250        C   Third   \n..        ...     ...     ...   ...    ...    ...      ...      ...     ...   \n875         1       3  female  15.0      0      0   7.2250        C   Third   \n879         1       1  female  56.0      0      1  83.1583        C   First   \n885         0       3  female  39.0      0      5  29.1250        Q   Third   \n889         1       1    male  26.0      0      0  30.0000        C   First   \n890         0       3    male  32.0      0      0   7.7500        Q   Third   \n\n       who  adult_male deck embark_town alive  alone  \n1    woman       False    C   Cherbourg   yes  False  \n5      man        True  NaN  Queenstown    no   True  \n9    child       False  NaN   Cherbourg   yes  False  \n16   child       False  NaN  Queenstown    no  False  \n19   woman       False  NaN   Cherbourg   yes   True  \n..     ...         ...  ...         ...   ...    ...  \n875  child       False  NaN   Cherbourg   yes   True  \n879  woman       False    C   Cherbourg   yes  False  \n885  woman       False  NaN  Queenstown    no  False  \n889    man        True    C   Cherbourg   yes   True  \n890    man        True  NaN  Queenstown    no   True  \n\n[247 rows x 15 columns]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Show all information about passengers who are under 30 years old and female","metadata":{}},{"cell_type":"code","source":"print(df[(df[\"sex\"] == \"female\") & (df[\"age\"] < 30)])","metadata":{"execution":{"iopub.status.busy":"2024-08-31T01:26:27.245875Z","iopub.execute_input":"2024-08-31T01:26:27.246384Z","iopub.status.idle":"2024-08-31T01:26:27.266385Z","shell.execute_reply.started":"2024-08-31T01:26:27.24634Z","shell.execute_reply":"2024-08-31T01:26:27.264799Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"     survived  pclass     sex   age  sibsp  parch     fare embarked   class  \\\n2           1       3  female  26.0      0      0   7.9250        S   Third   \n8           1       3  female  27.0      0      2  11.1333        S   Third   \n9           1       2  female  14.0      1      0  30.0708        C  Second   \n10          1       3  female   4.0      1      1  16.7000        S   Third   \n14          0       3  female  14.0      0      0   7.8542        S   Third   \n..        ...     ...     ...   ...    ...    ...      ...      ...     ...   \n874         1       2  female  28.0      1      0  24.0000        C  Second   \n875         1       3  female  15.0      0      0   7.2250        C   Third   \n880         1       2  female  25.0      0      1  26.0000        S  Second   \n882         0       3  female  22.0      0      0  10.5167        S   Third   \n887         1       1  female  19.0      0      0  30.0000        S   First   \n\n       who  adult_male deck  embark_town alive  alone  \n2    woman       False  NaN  Southampton   yes   True  \n8    woman       False  NaN  Southampton   yes  False  \n9    child       False  NaN    Cherbourg   yes  False  \n10   child       False    G  Southampton   yes  False  \n14   child       False  NaN  Southampton    no   True  \n..     ...         ...  ...          ...   ...    ...  \n874  woman       False  NaN    Cherbourg   yes  False  \n875  child       False  NaN    Cherbourg   yes   True  \n880  woman       False  NaN  Southampton   yes  False  \n882  woman       False  NaN  Southampton    no   True  \n887  woman       False    B  Southampton   yes   True  \n\n[147 rows x 15 columns]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Show all information of passengers with high ticket prices or older passengers","metadata":{}},{"cell_type":"code","source":"print(df[(df[\"fare\"] > 500) | (df[\"age\"] > 70)])","metadata":{"execution":{"iopub.status.busy":"2024-08-31T01:29:28.976717Z","iopub.execute_input":"2024-08-31T01:29:28.977235Z","iopub.status.idle":"2024-08-31T01:29:28.994169Z","shell.execute_reply.started":"2024-08-31T01:29:28.977192Z","shell.execute_reply":"2024-08-31T01:29:28.99281Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"     survived  pclass     sex   age  sibsp  parch      fare embarked  class  \\\n96          0       1    male  71.0      0      0   34.6542        C  First   \n116         0       3    male  70.5      0      0    7.7500        Q  Third   \n258         1       1  female  35.0      0      0  512.3292        C  First   \n493         0       1    male  71.0      0      0   49.5042        C  First   \n630         1       1    male  80.0      0      0   30.0000        S  First   \n679         1       1    male  36.0      0      1  512.3292        C  First   \n737         1       1    male  35.0      0      0  512.3292        C  First   \n851         0       3    male  74.0      0      0    7.7750        S  Third   \n\n       who  adult_male deck  embark_town alive  alone  \n96     man        True    A    Cherbourg    no   True  \n116    man        True  NaN   Queenstown    no   True  \n258  woman       False  NaN    Cherbourg   yes   True  \n493    man        True  NaN    Cherbourg    no   True  \n630    man        True    A  Southampton   yes   True  \n679    man        True    B    Cherbourg   yes  False  \n737    man        True    B    Cherbourg   yes   True  \n851    man        True  NaN  Southampton    no   True  \n","output_type":"stream"}]},{"cell_type":"markdown","source":"Find the sum of the null values in each variable","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T02:34:52.842917Z","iopub.execute_input":"2024-08-31T02:34:52.84413Z","iopub.status.idle":"2024-08-31T02:34:52.876302Z","shell.execute_reply.started":"2024-08-31T02:34:52.844081Z","shell.execute_reply":"2024-08-31T02:34:52.874905Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"survived         0\npclass           0\nsex              0\nage            177\nsibsp            0\nparch            0\nfare             0\nembarked         2\nclass            0\nwho              0\nadult_male       0\ndeck           688\nembark_town      2\nalive            0\nalone            0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df. drop(\"who\", axis=1) ","metadata":{"execution":{"iopub.status.busy":"2024-08-31T02:38:00.532078Z","iopub.execute_input":"2024-08-31T02:38:00.53255Z","iopub.status.idle":"2024-08-31T02:38:00.58207Z","shell.execute_reply.started":"2024-08-31T02:38:00.532511Z","shell.execute_reply":"2024-08-31T02:38:00.580913Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"     survived  pclass     sex   age  sibsp  parch     fare embarked   class  \\\n0           0       3    male  22.0      1      0   7.2500        S   Third   \n1           1       1  female  38.0      1      0  71.2833        C   First   \n2           1       3  female  26.0      0      0   7.9250        S   Third   \n3           1       1  female  35.0      1      0  53.1000        S   First   \n4           0       3    male  35.0      0      0   8.0500        S   Third   \n..        ...     ...     ...   ...    ...    ...      ...      ...     ...   \n886         0       2    male  27.0      0      0  13.0000        S  Second   \n887         1       1  female  19.0      0      0  30.0000        S   First   \n888         0       3  female   NaN      1      2  23.4500        S   Third   \n889         1       1    male  26.0      0      0  30.0000        C   First   \n890         0       3    male  32.0      0      0   7.7500        Q   Third   \n\n     adult_male deck  embark_town alive  alone  \n0          True  NaN  Southampton    no  False  \n1         False    C    Cherbourg   yes  False  \n2         False  NaN  Southampton   yes   True  \n3         False    C  Southampton   yes  False  \n4          True  NaN  Southampton    no   True  \n..          ...  ...          ...   ...    ...  \n886        True  NaN  Southampton    no   True  \n887       False    B  Southampton   yes   True  \n888       False  NaN  Southampton    no  False  \n889        True    C    Cherbourg   yes   True  \n890        True  NaN   Queenstown    no   True  \n\n[891 rows x 14 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>pclass</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>fare</th>\n      <th>embarked</th>\n      <th>class</th>\n      <th>adult_male</th>\n      <th>deck</th>\n      <th>embark_town</th>\n      <th>alive</th>\n      <th>alone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>True</td>\n      <td>NaN</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>First</td>\n      <td>False</td>\n      <td>C</td>\n      <td>Cherbourg</td>\n      <td>yes</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>False</td>\n      <td>NaN</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>First</td>\n      <td>False</td>\n      <td>C</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>True</td>\n      <td>NaN</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>S</td>\n      <td>Second</td>\n      <td>True</td>\n      <td>NaN</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>S</td>\n      <td>First</td>\n      <td>False</td>\n      <td>B</td>\n      <td>Southampton</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>S</td>\n      <td>Third</td>\n      <td>False</td>\n      <td>NaN</td>\n      <td>Southampton</td>\n      <td>no</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C</td>\n      <td>First</td>\n      <td>True</td>\n      <td>C</td>\n      <td>Cherbourg</td>\n      <td>yes</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>Q</td>\n      <td>Third</td>\n      <td>True</td>\n      <td>NaN</td>\n      <td>Queenstown</td>\n      <td>no</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 14 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"deck_mode = df['deck'].mode()[0]\ndf[\"deck\"] = df[\"deck\"].fillna(deck_mode)\nprint(df['deck'].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-08-31T16:40:49.77117Z","iopub.execute_input":"2024-08-31T16:40:49.771976Z","iopub.status.idle":"2024-08-31T16:40:49.786466Z","shell.execute_reply.started":"2024-08-31T16:40:49.771931Z","shell.execute_reply":"2024-08-31T16:40:49.785402Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"deck\nC    747\nB     47\nD     33\nE     32\nA     15\nF     13\nG      4\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"age_med = df[\"age\"].median\ndf[\"age\"] = df[\"age\"].fillna(age_med)\nprint(df[\"age\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-31T16:45:14.999808Z","iopub.execute_input":"2024-08-31T16:45:15.000292Z","iopub.status.idle":"2024-08-31T16:45:15.016844Z","shell.execute_reply.started":"2024-08-31T16:45:15.000247Z","shell.execute_reply":"2024-08-31T16:45:15.015072Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"0                                                   22.0\n1                                                   38.0\n2                                                   26.0\n3                                                   35.0\n4                                                   35.0\n                             ...                        \n886                                                 27.0\n887                                                 19.0\n888    <bound method Series.median of 0      22.0\\n1 ...\n889                                                 26.0\n890                                                 32.0\nName: age, Length: 891, dtype: object\n","output_type":"stream"}]},{"cell_type":"code","source":"a = df.groupby(['pclass', 'sex'])['survived'].agg(['sum', 'count', 'mean'])\nprint(a)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T16:49:52.491202Z","iopub.execute_input":"2024-08-31T16:49:52.491725Z","iopub.status.idle":"2024-08-31T16:49:52.516205Z","shell.execute_reply.started":"2024-08-31T16:49:52.491682Z","shell.execute_reply":"2024-08-31T16:49:52.514857Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"               sum  count      mean\npclass sex                         \n1      female   91     94  0.968085\n       male     45    122  0.368852\n2      female   70     76  0.921053\n       male     17    108  0.157407\n3      female   72    144  0.500000\n       male     47    347  0.135447\n","output_type":"stream"}]},{"cell_type":"code","source":"df[\"agg_flag\"] = df[\"age\"].apply(lambda x : 1 if x <30 else 0 )\nprint(df[\"agg_flag\"])","metadata":{"execution":{"iopub.status.busy":"2024-09-01T15:31:55.402926Z","iopub.execute_input":"2024-09-01T15:31:55.403335Z","iopub.status.idle":"2024-09-01T15:31:55.41522Z","shell.execute_reply.started":"2024-09-01T15:31:55.403296Z","shell.execute_reply":"2024-09-01T15:31:55.413598Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"0      1\n1      0\n2      1\n3      0\n4      0\n      ..\n886    1\n887    1\n888    0\n889    1\n890    0\nName: agg_flag, Length: 891, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"df_tips = sns.load_dataset(\"tips\")\nprint(df_tips)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T15:32:50.546928Z","iopub.execute_input":"2024-09-01T15:32:50.547365Z","iopub.status.idle":"2024-09-01T15:32:51.050301Z","shell.execute_reply.started":"2024-09-01T15:32:50.547326Z","shell.execute_reply":"2024-09-01T15:32:51.049041Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"     total_bill   tip     sex smoker   day    time  size\n0         16.99  1.01  Female     No   Sun  Dinner     2\n1         10.34  1.66    Male     No   Sun  Dinner     3\n2         21.01  3.50    Male     No   Sun  Dinner     3\n3         23.68  3.31    Male     No   Sun  Dinner     2\n4         24.59  3.61  Female     No   Sun  Dinner     4\n..          ...   ...     ...    ...   ...     ...   ...\n239       29.03  5.92    Male     No   Sat  Dinner     3\n240       27.18  2.00  Female    Yes   Sat  Dinner     2\n241       22.67  2.00    Male    Yes   Sat  Dinner     2\n242       17.82  1.75    Male     No   Sat  Dinner     2\n243       18.78  3.00  Female     No  Thur  Dinner     2\n\n[244 rows x 7 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"total_bill = df_tips.groupby([\"time\"])[\"total_bill\"].agg([\"sum\", \"min\", \"max\", \"mean\" ])\nprint(total_bill)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T15:36:25.851305Z","iopub.execute_input":"2024-09-01T15:36:25.852685Z","iopub.status.idle":"2024-09-01T15:36:25.878809Z","shell.execute_reply.started":"2024-09-01T15:36:25.852614Z","shell.execute_reply":"2024-09-01T15:36:25.877112Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"            sum   min    max       mean\ntime                                   \nLunch   1167.47  7.51  43.11  17.168676\nDinner  3660.30  3.07  50.81  20.797159\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_36/1922372165.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  total_bill = df_tips.groupby([\"time\"])[\"total_bill\"].agg([\"sum\", \"min\", \"max\", \"mean\" ])\n","output_type":"stream"}]},{"cell_type":"code","source":"ttl_bill = df_tips.groupby([\"time\", \"day\"])[\"total_bill\"].agg([\"sum\", \"min\", \"max\", \"mean\" ])\nprint(ttl_bill)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T15:39:31.727508Z","iopub.execute_input":"2024-09-01T15:39:31.728462Z","iopub.status.idle":"2024-09-01T15:39:31.765817Z","shell.execute_reply.started":"2024-09-01T15:39:31.728414Z","shell.execute_reply":"2024-09-01T15:39:31.764242Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"                 sum    min    max       mean\ntime   day                                   \nLunch  Thur  1077.55   7.51  43.11  17.664754\n       Fri     89.92   8.58  16.27  12.845714\n       Sat      0.00    NaN    NaN        NaN\n       Sun      0.00    NaN    NaN        NaN\nDinner Thur    18.78  18.78  18.78  18.780000\n       Fri    235.96   5.75  40.17  19.663333\n       Sat   1778.40   3.07  50.81  20.441379\n       Sun   1627.16   7.25  48.17  21.410000\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_36/281243452.py:1: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  ttl_bill = df_tips.groupby([\"time\", \"day\"])[\"total_bill\"].agg([\"sum\", \"min\", \"max\", \"mean\" ])\n","output_type":"stream"}]},{"cell_type":"code","source":"df_tips[(df_tips[\"time\"] == \"Lunch\") & (df_tips[\"sex\"] == \"Female\")]\ntotal_bills = df_tips.groupby([\"day\"]).agg({'total_bill': ['sum', 'min', 'max', 'mean'],\n                                           'tip': ['sum', 'min', 'max', 'mean']})\nprint(total_bills)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T15:48:56.860355Z","iopub.execute_input":"2024-09-01T15:48:56.860858Z","iopub.status.idle":"2024-09-01T15:48:56.890263Z","shell.execute_reply.started":"2024-09-01T15:48:56.860814Z","shell.execute_reply":"2024-09-01T15:48:56.888624Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"     total_bill                             tip                       \n            sum   min    max       mean     sum   min    max      mean\nday                                                                   \nThur    1096.33  7.51  43.11  17.682742  171.83  1.25   6.70  2.771452\nFri      325.88  5.75  40.17  17.151579   51.96  1.00   4.73  2.734737\nSat     1778.40  3.07  50.81  20.441379  260.40  1.00  10.00  2.993103\nSun     1627.16  7.25  48.17  21.410000  247.39  1.01   6.50  3.255132\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_36/1250459422.py:2: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  total_bills = df_tips.groupby([\"day\"]).agg({'total_bill': ['sum', 'min', 'max', 'mean'],\n","output_type":"stream"}]},{"cell_type":"code","source":"filtered = df_tips.loc[(df_tips[\"size\"] < 3) & (df_tips[\"total_bill\"] > 10)]\nprint(filtered[\"total_bill\"].mean())\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T16:01:00.571001Z","iopub.execute_input":"2024-09-01T16:01:00.571492Z","iopub.status.idle":"2024-09-01T16:01:00.581661Z","shell.execute_reply.started":"2024-09-01T16:01:00.571448Z","shell.execute_reply":"2024-09-01T16:01:00.579898Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"17.184965034965035\n","output_type":"stream"}]},{"cell_type":"code","source":"df_tips[\"total_bill_tip_sum\"] = df_tips[\"total_bill\"] + df_tips[\"tip\"]\nprint(df_tips[\"total_bill_tip_sum\"])","metadata":{"execution":{"iopub.status.busy":"2024-09-01T16:05:17.655707Z","iopub.execute_input":"2024-09-01T16:05:17.657051Z","iopub.status.idle":"2024-09-01T16:05:17.66734Z","shell.execute_reply.started":"2024-09-01T16:05:17.656993Z","shell.execute_reply":"2024-09-01T16:05:17.665641Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"0      18.00\n1      12.00\n2      24.51\n3      26.99\n4      28.20\n       ...  \n239    34.95\n240    29.18\n241    24.67\n242    19.57\n243    21.78\nName: total_bill_tip_sum, Length: 244, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"df_sort = df_tips.sort_values(by='total_bill_tip_sum', ascending=False)\ntop_30_customers = df_sort.head(30)\nprint(top_30_customers)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T16:12:49.227347Z","iopub.execute_input":"2024-09-01T16:12:49.228479Z","iopub.status.idle":"2024-09-01T16:12:49.248307Z","shell.execute_reply.started":"2024-09-01T16:12:49.228415Z","shell.execute_reply":"2024-09-01T16:12:49.246947Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"     total_bill    tip     sex smoker   day    time  size  total_bill_tip_sum\n170       50.81  10.00    Male    Yes   Sat  Dinner     3               60.81\n212       48.33   9.00    Male     No   Sat  Dinner     4               57.33\n59        48.27   6.73    Male     No   Sat  Dinner     4               55.00\n156       48.17   5.00    Male     No   Sun  Dinner     6               53.17\n182       45.35   3.50    Male    Yes   Sun  Dinner     3               48.85\n197       43.11   5.00  Female    Yes  Thur   Lunch     4               48.11\n23        39.42   7.58    Male     No   Sat  Dinner     4               47.00\n102       44.30   2.50  Female    Yes   Sat  Dinner     3               46.80\n142       41.19   5.00    Male     No  Thur   Lunch     5               46.19\n95        40.17   4.73    Male    Yes   Fri  Dinner     4               44.90\n184       40.55   3.00    Male    Yes   Sun  Dinner     2               43.55\n112       38.07   4.00    Male     No   Sun  Dinner     3               42.07\n207       38.73   3.00    Male    Yes   Sat  Dinner     4               41.73\n56        38.01   3.00    Male    Yes   Sat  Dinner     4               41.01\n141       34.30   6.70    Male     No  Thur   Lunch     6               41.00\n238       35.83   4.67  Female     No   Sat  Dinner     3               40.50\n11        35.26   5.00  Female     No   Sun  Dinner     4               40.26\n52        34.81   5.20  Female     No   Sun  Dinner     4               40.01\n85        34.83   5.17  Female     No  Thur   Lunch     4               40.00\n47        32.40   6.00    Male     No   Sun  Dinner     4               38.40\n180       34.65   3.68    Male    Yes   Sun  Dinner     4               38.33\n179       34.63   3.55    Male    Yes   Sun  Dinner     2               38.18\n83        32.68   5.00    Male    Yes  Thur   Lunch     2               37.68\n39        31.27   5.00    Male     No   Sat  Dinner     3               36.27\n167       31.71   4.50    Male     No   Sun  Dinner     4               36.21\n175       32.90   3.11    Male    Yes   Sun  Dinner     2               36.01\n44        30.40   5.60    Male     No   Sun  Dinner     4               36.00\n173       31.85   3.18    Male    Yes   Sun  Dinner     2               35.03\n116       29.93   5.07    Male     No   Sun  Dinner     4               35.00\n155       29.85   5.14  Female     No   Sun  Dinner     5               34.99\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}}]}